version: "3.9"

services:
  adausd:
      build:
        context: .
      container_name: ADAUSD
      volumes:
      - ./market/ADAUSD/coinbasepro.key:/app/coinbasepro.key
      - ./market/ADAUSD/config.json:/app/config.json
      - ./market/ADAUSD/pycryptobot.log:/app/pycryptobot.log
      - ./market/ADAUSD/graphs:/app/graphs
      - ./telegram-pool:/app/telegram-pool
      environment:
        - PYTHONUNBUFFERED=1
      restart: always
  
  algousd:
      build:
        context: .
      container_name: ALGOUSD
      volumes:
      - ./market/ALGOUSD/coinbasepro.key:/app/coinbasepro.key
      - ./market/ALGOUSD/config.json:/app/config.json
      - ./market/ALGOUSD/pycryptobot.log:/app/pycryptobot.log
      - ./market/ALGOUSD/graphs:/app/graphs
      - ./telegram-pool:/app/telegram-pool
      environment:
        - PYTHONUNBUFFERED=1
      deploy:
        restart_policy:
          condition: on-failure
  
  atomusd:
      build:
        context: .
      container_name: ATOMUSD
      volumes:
      - ./market/ATOMUSD/coinbasepro.key:/app/coinbasepro.key
      - ./market/ATOMUSD/config.json:/app/config.json
      - ./market/ATOMUSD/pycryptobot.log:/app/pycryptobot.log
      - ./market/ATOMUSD/graphs:/app/graphs
      environment:
        - PYTHONUNBUFFERED=1
      deploy:
        restart_policy:
          condition: on-failure

  btcusd:
      build:
        context: .
      container_name: BTCUSD
      volumes:
        - ./market/BTCUSD/coinbasepro.key:/app/coinbasepro.key
        - ./market/BTCUSD/config.json:/app/config.json
        - ./market/BTCUSD/pycryptobot.log:/app/pycryptobot.log
        - ./market/BTCUSD/graphs:/app/graphs
        #- /etc/localtime:/etc/localtime:ro
      environment:
        - PYTHONUNBUFFERED=1
      deploy:
        restart_policy:
          condition: on-failure
  
  dotusd:
      build:
        context: .
      container_name: DOTUSD
      volumes:
        - ./market/DOTUSD/coinbasepro.key:/app/coinbasepro.key
        - ./market/DOTUSD/config.json:/app/config.json
        - ./market/DOTUSD/pycryptobot.log:/app/pycryptobot.log
        - ./market/DOTUSD/graphs:/app/graphs
      environment:
        - PYTHONUNBUFFERED=1
      deploy:
        restart_policy:
          condition: on-failure
  
  ethusd:
      build:
        context: .
      container_name: ETHUSD
      volumes:
      - ./market/ETHUSD/coinbasepro.key:/app/coinbasepro.key
      - ./market/ETHUSD/config.json:/app/config.json
      - ./market/ETHUSD/pycryptobot.log:/app/pycryptobot.log
      - ./market/ETHUSD/graphs:/app/graphs
      - ./telegram-pool:/app/telegram-pool
      environment:
        - PYTHONUNBUFFERED=1
      deploy:
        restart_policy:
          condition: on-failure
  
  # ftmusd:
  #     build:
  #       context: .
  #     container_name: FTMUSD
  #     volumes:
  #     - ./market/FTMUSD/coinbasepro.key:/app/coinbasepro.key
  #     - ./market/FTMUSD/config.json:/app/config.json
  #     - ./market/FTMUSD/pycryptobot.log:/app/pycryptobot.log
  #     - ./market/FTMUSD/graphs:/app/graphs
  #     environment:
  #       - PYTHONUNBUFFERED=1
  #     deploy:
  #       restart_policy:
  #         condition: on-failure
  
  maticusd:
      build:
        context: .
      container_name: MATICUSD
      volumes:
      - ./market/MATICUSD/coinbasepro.key:/app/coinbasepro.key
      - ./market/MATICUSD/config.json:/app/config.json
      - ./market/MATICUSD/pycryptobot.log:/app/pycryptobot.log
      - ./market/MATICUSD/graphs:/app/graphs
      environment:
        - PYTHONUNBUFFERED=1
      deploy:
        restart_policy:
          condition: on-failure

  solusd:
      build:
        context: .
      container_name: SOLUSD
      volumes:
      - ./market/SOLUSD/coinbasepro.key:/app/coinbasepro.key
      - ./market/SOLUSD/config.json:/app/config.json
      - ./market/SOLUSD/pycryptobot.log:/app/pycryptobot.log
      - ./market/SOLUSD/graphs:/app/graphs
      environment:
        - PYTHONUNBUFFERED=1
      deploy:
        restart_policy:
          condition: on-failure
  
  # xlmusd:
  #     build:
  #       context: .
  #     container_name: XLMUSD
  #     volumes:
  #     - ./market/XLMUSD/coinbasepro.key:/app/coinbasepro.key
  #     - ./market/XLMUSD/config.json:/app/config.json
  #     - ./market/XLMUSD/pycryptobot.log:/app/pycryptobot.log
  #     - ./market/XLMUSD/graphs:/app/graphs
  #     environment:
  #       - PYTHONUNBUFFERED=1
  #     deploy:
  #       restart_policy:
  #         condition: on-failure

# Bot can also be setup to use Scanner/Screener with this block
    # pycryptobot:
    #     image: ghcr.io/whittlem/pycryptobot/pycryptobot:latest
    #     container_name: pycryptobot
    #     volumes:
    #         - ./market/binance.key:/app/keys/binance.key:ro
    #         - ./market/config.json:/app/config.json
    #         - ./market/pycryptobot.log:/app/pycryptobot.log
    #         - ./market/screener.json:/app/screener.json
    #         - ./market:/app/telegram_data
    #         - ./market/graphs:/app/graphs
    #         - /etc/timezone:/etc/timezone:ro
    #         - /etc/localtime:/etc/localtime:ro
    #     environment:
    #         - PYTHONUNBUFFERED=1
    #     entrypoint: ["python3", "-u", "telegram_bot.py"]
    #     restart: always


#  Different markets can be specified as below
#
#  BTCEUR:
#    build:
#      context: .
#    container_name: BTCEUR
#    volumes:
#      - ./market/BTCEUR/config.json:/app/config.json
#      - ./market/BTCEUR/pycryptobot.log:/app/pycryptobot.log
#      - ./market/BTCEUR/graphs:/app/graphs
#      - /etc/localtime:/etc/localtime:ro
#    environment:
#      - PYTHONUNBUFFERED=1
#    deploy:
#      restart_policy:
#        condition: on-failure
#
#  ETHEUR:
#    build:
#      context: .
#    container_name: ETHEUR
#    volumes:
#      - ./market/ETHEUR/config.json:/app/config.json
#      - ./market/ETHEUR/pycryptobot.log:/app/pycryptobot.log
#      - ./market/ETHEUR/graphs:/app/graphs
#      - /etc/localtime:/etc/localtime:ro
#    environment:
#      - PYTHONUNBUFFERED=1
#    deploy:
#      restart_policy:
#        condition: on-failure
#
# Uncomment to build and run Web Portal
#  pycrypto-websvc:
#      build:
#        context: .
#        dockerfile: Dockerfile-websvc
#      container_name: pycrypto-websvc
#      volumes:
#        - ./market/:/app/market
#        - /etc/localtime:/etc/localtime:ro
#      ports:
#        - 5000:5000
#      environment:
#        - PYTHONUNBUFFERED=1
#      deploy:
#        restart_policy:
#          condition: on-failure
